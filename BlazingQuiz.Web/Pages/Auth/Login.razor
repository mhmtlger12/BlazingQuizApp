@page "/auth/login"
@layout EmptyLayout

@inject NavigationManager NavigationManager
@inject IAuthApi AauthApi
@inject QuizAuthStateProvider QuizAuthStateProvider

<div class="container">
    <div class="row vh-100">
        <div class="col-md-6 col-lg-4 mx-auto my-auto border shadow-lg p-4 rounded bg-white">
            <div class="text-center mb-4">
                <h1 class="h3">QuizApp - Giriş Yap</h1>
            </div>

           @*  <AuthorizeView>
                <Authorizing>
                    <div class="alert alert-info text-center">
                        Yetkilendiriyor...
                    </div>
                </Authorizing>
                <NotAuthorized>
                    <div class="alert alert-warning text-center">
                        Yetkili Değil
                    </div>
                </NotAuthorized>
                <Authorized>
                    <div class="alert alert-success text-center">
                        Yetkili: @context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value
                    </div>
                </Authorized>
            </AuthorizeView *@

            <EditForm Model="_model" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator />

                <!-- Kullanıcı Adı Alanı -->
                <div class="form-group mb-3">
                    <label for="username" class="form-label">Kullanıcı Adı</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-person-fill"></i>
                        </span>
                        <InputText id="username" @bind-Value="_model.UserName" class="form-control" placeholder="Kullanıcı Adınızı Girin" />
                    </div>
                    <ValidationMessage For="() => _model.UserName" />
                </div>

                <!-- Parola Alanı -->
                <div class="form-group mb-3">
                    <label for="password" class="form-label">Parola</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-lock-fill"></i>
                        </span>
                        <InputText id="password" type="password" @bind-Value="_model.Password" class="form-control" placeholder="Parolanızı Girin" />
                    </div>
                    <ValidationMessage For="() => _model.Password" />
                </div>

                <!-- Hata Mesajı -->
                @if (_error != null)
                {
                    <div class="alert alert-danger text-center" role="alert">
                        <strong>Hata:</strong> @_error
                    </div>
                }

                <!-- Giriş Yap Butonu -->
                <div class="d-grid">
                    @if (!_IsBusy)
                    {
                        <button type="submit" class="btn btn-primary btn-lg">Giriş Yap</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-secondary btn-lg">
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            Oturum Açılıyor...
                        </button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    // Kullanıcı giriş bilgileri modeli
    private LoginDto _model = new();

    // İşlem yapılıyor durumu
    private bool _IsBusy;

    // Hata mesajı
    private string? _error;

    protected override void OnInitialized()
    {
        if (QuizAuthStateProvider.IsLoggedIn)
        {
            NavigationManager.NavigateTo("/",replace:true);
            return;
        }
    }

    // Giriş işlemi için metot
    private async Task LoginAsync()
    {
        _error = null;
        _IsBusy = true;

        try
        {
            // Giriş API'sine istek
            var authResponse = await AauthApi.LoginAsync(_model);

            // Hata kontrolü
            if (authResponse.HasError)
            {
                _error = authResponse.ErrorMessage;
                return;
            }

            // Giriş başarılıysa kullanıcıyı yönlendirme
            var loggedInUser = authResponse.User;
            await QuizAuthStateProvider.SetLoginAsync(loggedInUser);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            // Hata durumunda mesajı göster
            _error = ex.Message;
        }
        finally
        {
            // İşlem tamamlandı
            _IsBusy = false;
        }
    }
}
