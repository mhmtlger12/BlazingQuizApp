@page "/auth/login"
@layout EmptyLayout

@inject NavigationManager NavigationManager
@inject IAuthApi AauthApi

<div class="container">
    <div class="row vh-100">
        <div class="col-sm-4 mx-auto my-auto border shadow-lg">
            <div class="mt-3">
                <h1 class="h3">
                    Giriş Ekranı - QuizApp
                </h1>
            </div>
            <hr />
            <EditForm Model="_model" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label class="form-label">Kullanıcı Adı: </label>
                    <InputText @bind-Value="_model.UserName" class="form-control" />
                    <ValidationMessage For="()=> _model.UserName" />

                </div>

                <div class="mb-3">
                    <label class="form-label">Parola: </label>
                    <InputText type="password" @bind-Value="_model.Password" class="form-control" />
                    <ValidationMessage For="()=> _model.Password" />

                </div>
                @if (_error!=null)
                {
                    <div class="mb-3 bg-danger text-white p-2">
                        <p>@_error</p>
                    </div>
                }
                <div class="mb-3">
                    @if (!_IsBusy)
                    {


                        <button type="submit" class="btn btn-success">
                            Giriş Yap
                        </button>
                    }
                    else

                    {
                        <button type="button" disabled class="btn btn-secondary">
                            Oturum Aç
                        </button>
                    }

                </div>
            </EditForm>
        </div>
    </div>

</div>

@code {
    // Kullanıcı girişi için gereken model
    private LoginDto _model = new();

    // Giriş işlemi yapılırken UI'de kullanıcıya işlem yapıldığını göstermek için kullanılan durum değişkeni
    private bool _IsBusy;

    // Hata mesajını tutan değişken
    private string? _error;

    // Giriş işlemini asenkron olarak yapan metod
    private async Task LoginAsync()
    {
        // İşlem başladı, UI'de "Yükleniyor" göstermek için _IsBusy değişkenini true yapıyoruz
        _error = null;
        _IsBusy = true;

        try
        {
            // Login işlemi için API'ye istek yapıyoruz
            var authResponse = await AauthApi.LoginAsync(_model);

            // API'den dönen yanıtta hata varsa, hata mesajını ekliyoruz
            if (authResponse.HasError)
            {
                _error = authResponse.ErrorMessage;
                return;
            }

            // Başarılı giriş yapılırsa, burada oturum açan kullanıcı bilgilerini saklayabiliriz
            // Ayrıca, kullanıcıyı korunan bir sayfaya yönlendirebiliriz
            // Örnek: Set login info in some storage (local storage, session, etc.)
            // Navigate To ProtectedPage
            //giri başarılı olursa ana safaya atıyoruz
            NavigationManager.NavigateTo("/");

        }
        catch (Exception ex)
        {
            // Hata meydana gelirse, hata mesajını _error değişkenine kaydediyoruz
            _error = ex.Message;
        }
        finally
        {
            // İşlem tamamlandığında _IsBusy'yi false yapıyoruz, UI'yı günceller
            _IsBusy = false;
        }

        // Ekstra bir _IsBusy = false; satırına gerek yok çünkü finally bloğunda zaten bu işlem yapılıyor
    }
}


